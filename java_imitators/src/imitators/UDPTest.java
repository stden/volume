/**
 * http://www.progsystema.ru 
 */

package imitators;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.PortUnreachableException;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;
import javax.swing.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author  anatoliy
 */
public class UDPTest extends javax.swing.JFrame {
	private static final long serialVersionUID = -5735039896294205236L;
	
	private static int MAX_DATAGRAM_SIZE = 1500;
    private static int READ_INTERVAL = 100;
    private static byte NEWLINE = 0x0A;
    private static String[][] COMMANDS =      
    {
        { "CMD_ASCII" ,             "W"},
        { "CMD_BINARY" ,            "X"},
        { "CMD_CURRENT_ANGLE" ,     "C"},
        { "CMD_CONFIG" ,            "F"},
        { "CMD_DEVICE_IDENTIFY" ,   "?"},
        { "CMD_DISABLE_FIRING" ,    "B"},
        { "CMD_DO_REPLIES" ,        "H"},        
        { "CMD_DO_ANGLES" ,         "U"},        
        { "CMD_ENABLE_FIRING" ,     "A"},
        { "CMD_SELECT_SPEED" ,      "I"},
        { "CMD_NETWORK" ,           "V"},
        { "CMD_ORIGIN" ,            "O"},
        { "CMD_VER_DATE" ,          "J"},
        { "CMD_POINTER_ON" ,        "P"},
        { "CMD_POINTER_OFF" ,       "Q"},
        { "CMD_START_SCAN" ,        "S"},
        { "CMD_STOP_SCAN" ,         "T"},        
        { "CMD_READ_STATUS" ,       "Y"},
        { "CMD_RESET_MAC" ,         "Z"},        
        { "CMD_RANGE",              "G"}
    };
    private DatagramSocket socket;
   
    /** Creates new form UDPTest */
    public UDPTest() {
        try {
            socket = new DatagramSocket();
            socket.setSoTimeout(1);
            //read from socket timer
            Timer readTimer = new Timer(READ_INTERVAL, new
                    ActionListener(){
                        public void actionPerformed(ActionEvent event){
                            readSocket();
                        }
                    }
            );
            readTimer.start();
            initComponents();
            
            //Comparator<String[]>  cmdComparator = new 
            //fill in jcbCommand items     W   
            DefaultComboBoxModel dbcm = (DefaultComboBoxModel)( jcbCommand.getModel() );
            for(String[] cmd : COMMANDS){
                dbcm.addElement(cmd[0]);
            }
        } catch (SocketException ex) {
            Logger.getLogger(UDPTest.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtaAnswers = new javax.swing.JTextArea();
        jtfIP = new javax.swing.JTextField();
        jtfPort = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jbConnect = new javax.swing.JButton();
        jbSend = new javax.swing.JButton();
        jcbCommand = new javax.swing.JComboBox();
        jcbClear = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("UDPTest");

        jtaAnswers.setColumns(20);
        jtaAnswers.setEditable(false);
        jtaAnswers.setRows(5);
        jtaAnswers.setAutoscrolls(false);
        jScrollPane1.setViewportView(jtaAnswers);

        jtfIP.setText("127.0.0.1");

        jtfPort.setText("30");

        jLabel1.setText("IP");

        jLabel2.setText("Port");

        jbConnect.setText("Connect");
        jbConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbConnectActionPerformed(evt);
            }
        });

        jbSend.setText("Send");
        jbSend.setEnabled(false);
        jbSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSendActionPerformed(evt);
            }
        });

        jcbCommand.setEditable(true);

        jcbClear.setText("Clear");

        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                    .addComponent(jcbCommand, 0, 345, Short.MAX_VALUE))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jcbClear)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbSend, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jtfPort, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jtfIP, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jbConnect, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtfIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtfPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbConnect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jcbClear))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbSend)
                    .addComponent(jcbCommand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbConnectActionPerformed
        try {
            socket.connect(InetAddress.getByName(jtfIP.getText()), Integer.valueOf(jtfPort.getText()));
            jbSend.setEnabled(true);
        } catch (UnknownHostException ex) {
            Logger.getLogger(UDPTest.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_jbConnectActionPerformed

    /** Looks cmd in COMMANDS, if not found send cmd, else cmd code */
    private void sendCmd(String cmd) throws IOException{
        for (String[] command:COMMANDS){
            if (cmd.equals(command[0])){
                cmd = command[1];
                break;
            }
        }
        cmd = cmd + (char)NEWLINE;
        DatagramPacket packet = new DatagramPacket(cmd.getBytes(), cmd.length());
        socket.send(packet);
    }
    
    private void jbSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSendActionPerformed
        try {
            sendCmd((String) jcbCommand.getEditor().getItem());
            if(jcbClear.isSelected()) jcbCommand.getEditor().setItem("");
        } catch (PortUnreachableException ex) {
            JOptionPane.showMessageDialog(jcbCommand, "Port unreachable");
        } catch (IOException ex) {
            Logger.getLogger(UDPTest.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbSendActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jtaAnswers.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void readSocket(){
        try {
            byte[] buf = new byte[MAX_DATAGRAM_SIZE];
            DatagramPacket packet = new DatagramPacket(buf, MAX_DATAGRAM_SIZE);
            socket.receive(packet);
            jtaAnswers.append(new String(buf).trim()+'\n');
        } catch (PortUnreachableException ex){
            JOptionPane.showMessageDialog(jcbCommand, "Port unreachable");
        } catch (SocketTimeoutException ex){
            //do nothing
        } catch (IOException ex) {
            Logger.getLogger(UDPTest.class.getName()).log(Level.SEVERE, "IOException", ex);
        }     
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UDPTest().setVisible(true);
            }
        });       
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbConnect;
    private javax.swing.JButton jbSend;
    private javax.swing.JCheckBox jcbClear;
    private javax.swing.JComboBox jcbCommand;
    private javax.swing.JTextArea jtaAnswers;
    private javax.swing.JTextField jtfIP;
    private javax.swing.JTextField jtfPort;
    // End of variables declaration//GEN-END:variables
    
}
